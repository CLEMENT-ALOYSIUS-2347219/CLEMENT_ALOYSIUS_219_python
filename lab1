{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hello there,\n",
    "\n",
    "Allow me to introduce myself and my milk dairy management venture. My name is Clement Aloysius G bearing register number 2347219, and I am the proud founder and manager of a thriving milk dairy business.\n",
    "\n",
    "Our milk dairy is a passion project that was born out of a deep love and respect for nature's bounty and a commitment to providing wholesome, nutritious, and delicious dairy products to our community. We are located in outskirts of bengaluru, surrounded by lush green pastures and clean air, ensuring that our cows graze on the finest, pesticide-free grass, resulting in high-quality milk.\n",
    "\n",
    "At our dairy farm, we follow stringent quality and hygiene standards to ensure the well-being of our cows and the premium quality of the milk they produce. Our team comprises dedicated and skilled professionals who share the same vision of providing the best for our customers.\n",
    "\n",
    "We believe in sustainable and ethical practices, which is why we prioritize the welfare of our cows and the environment. Our cows are treated with utmost care and receive the best veterinary attention. Additionally, we actively participate in eco-friendly initiatives, including waste management and renewable energy adoption, to minimize our ecological footprint.\n",
    "\n",
    "Our range of dairy products includes pasteurized milk, various types of cheeses, yogurts, and other dairy delights, all carefully crafted to maintain the natural goodness and flavors. We source our packaging materials responsibly to reduce waste and promote recycling.\n",
    "\n",
    "In line with our commitment to customer satisfaction, we maintain open channels of communication to gather feedback and suggestions. This helps us improve our products and services continuously, ensuring that our customers' needs are met to the fullest.\n",
    "\n",
    "As we move forward, we aim to expand our dairy farm, reach out to more communities, and create partnerships with local businesses to promote the consumption of locally-sourced dairy products. Moreover, we are exploring new ways to integrate technology into our processes to enhance efficiency while staying true to our traditional dairy values.\n",
    "\n",
    "In conclusion, our milk dairy management venture is not just a business; it's a labor of love and dedication to providing wholesome dairy products to our customers. We invite you to experience the taste of our commitment firsthand and join us in supporting a sustainable and compassionate approach to dairy farming. Thank you for your time, and we look forward to serving you with the best dairy products in town.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The word 'milk' appears 2 times in the paragraph.\n",
      "Hello  is string\n",
      "there,  is string\n",
      "Allow  is string\n",
      "me  is string\n",
      "to  is string\n",
      "introduce  is string\n",
      "myself  is string\n",
      "and  is string\n",
      "my  is string\n",
      "milk  is string\n",
      "dairy  is string\n",
      "management  is string\n",
      "venture.  is string\n",
      "My  is string\n",
      "name  is string\n",
      "is  is string\n",
      "Clement  is string\n",
      "Aloysius  is string\n",
      "G  is string\n",
      "bearing  is string\n",
      "register  is string\n",
      "number  is string\n",
      "2347219, is int\n",
      "and  is string\n",
      "I  is string\n",
      "am  is string\n",
      "the  is string\n",
      "proud  is string\n",
      "founder  is string\n",
      "and  is string\n",
      "manager  is string\n",
      "of  is string\n",
      "a  is string\n",
      "thriving  is string\n",
      "milk  is string\n",
      "dairy  is string\n",
      "business.  is string\n"
     ]
    }
   ],
   "source": [
    "#1:Write a python program to count the frequency of any specific word (in your domain) in the paragraph.\n",
    "\n",
    "def count_word_frequency(paragraph, target_word):\n",
    "    words = paragraph.split()\n",
    "    word_frequency = {}\n",
    "    \n",
    "    for word in words:\n",
    "        # Remove punctuation and convert to lowercase for case-insensitive comparison\n",
    "        cleaned_word = word.strip(\".,!?\\\"'()\").lower()\n",
    "        \n",
    "        if cleaned_word == target_word.lower():\n",
    "            word_frequency[cleaned_word] = word_frequency.get(cleaned_word, 0) + 1\n",
    "    \n",
    "    return word_frequency.get(target_word.lower(), 0)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    paragraph = \"  Hello there, Allow me to introduce myself and my milk dairy management venture. My name is Clement Aloysius G bearing register number 2347219, and I am the proud founder and manager of a thriving milk dairy business.\"\n",
    "\n",
    "\n",
    "    target_word = input(\"Enter the word to count its frequency: \")\n",
    "\n",
    "    frequency = count_word_frequency(paragraph, target_word)\n",
    "    print(f\"The word '{target_word}' appears {frequency} times in the paragraph.\")\n",
    "    num=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n",
    "s_word=paragraph.split(\" \")\n",
    "for i in s_word:\n",
    "     for j in i:\n",
    "         if j in num:\n",
    "             if \".\" in i:\n",
    "                 print (i,\" is float\")\n",
    "                 break\n",
    "             else:\n",
    "                 print(i, \"is int\")\n",
    "                 break\n",
    "         else:\n",
    "             print(i,\" is string\")\n",
    "             break\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Alphabets: 169\n",
      "Number of Numeric Digits: 7\n",
      "Number of Special Symbols: 41\n"
     ]
    }
   ],
   "source": [
    "def count_symbols(paragraph):\n",
    "    alphabet_count = 0\n",
    "    numeric_count = 0\n",
    "    special_count = 0\n",
    "\n",
    "    for char in paragraph:\n",
    "        if char.isalpha():\n",
    "            alphabet_count += 1\n",
    "        elif char.isdigit():\n",
    "            numeric_count += 1\n",
    "        else:\n",
    "            special_count += 1\n",
    "\n",
    "    return alphabet_count, numeric_count, special_count\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Sample paragraph (you can also take input from the user)\n",
    "    paragraph = \" Hello there, Allow me to introduce myself and my milk dairy management venture. My name is Clement Aloysius G bearing register number 2347219, and I am the proud founder and manager of a thriving milk dairy business.\"\n",
    "\n",
    "    # Get the counts of alphabets, numeric digits, and special symbols\n",
    "    alphabet_count, numeric_count, special_count = count_symbols(paragraph)\n",
    "\n",
    "    # Display the results\n",
    "    print(\"Number of Alphabets:\", alphabet_count)\n",
    "    print(\"Number of Numeric Digits:\", numeric_count)\n",
    "    print(\"Number of Special Symbols:\", special_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Set: {'milk', True, 3.14, 5, 'dairy'}\n",
      "Popped Element: milk\n",
      "Set after discarding element: {True, 3.14, 5}\n",
      "Cleared Set: set()\n",
      "Set has been deleted.\n",
      "Original Set: {'milk', True, 3.14, 5, 'dairy'}\n",
      "Updated Set with Additional Attributes: {'milk', True, 3.14, 'butter', 5, 'cow', 'yogurt', 'cheese', 'farm', 'dairy'}\n"
     ]
    }
   ],
   "source": [
    "def milk_dairy_management_data_set():\n",
    "    \"\"\"\n",
    "    Create a Set with elements representing various data types in milk dairy management.\n",
    "\n",
    "    This function creates a set called `milk_data_set` containing different data types\n",
    "    representing various aspects of milk dairy management. The set will consist of elements\n",
    "    like integers, floats, strings, and Booleans, representing different attributes of the\n",
    "    milk dairy management domain.\n",
    "\n",
    "    Returns:\n",
    "    - milk_data_set (set): A set containing elements of various data types in milk dairy management.\n",
    "\n",
    "    Insights:\n",
    "    - The `pop()` function: The `pop()` function removes and returns an arbitrary element from\n",
    "      the set. Since sets are unordered, the popped element can be any element in the set.\n",
    "      This function can be useful when you want to retrieve and process an element randomly from\n",
    "      the set.\n",
    "\n",
    "    - The `clear()` function: The `clear()` function removes all elements from the set, making\n",
    "      it an empty set. It is useful when you want to start fresh and remove all existing elements\n",
    "      from the set.\n",
    "\n",
    "    - The `discard()` function: The `discard()` function removes a specified element from the set\n",
    "      if it exists. If the element is not found in the set, the function does nothing, and the set\n",
    "      remains unchanged. This function is useful when you want to remove a specific element from\n",
    "      the set without raising an error if the element doesn't exist.\n",
    "\n",
    "    - The `del` keyword: The `del` keyword can be used to delete the entire set, releasing the\n",
    "      memory used by the set. After using `del`, the set will no longer exist, and any reference\n",
    "      to it will result in an error. It is useful when you want to completely remove the set\n",
    "      from memory.\n",
    "\n",
    "    Example:\n",
    "    >>> milk_data_set = milk_dairy_management_data_set()\n",
    "    >>> print(milk_data_set)\n",
    "    {5, 'milk', 3.14, True, 'dairy'}\n",
    "    \n",
    "    >>> milk_data_set.pop()\n",
    "    5\n",
    "    \n",
    "    >>> milk_data_set.discard('dairy')\n",
    "    \n",
    "    >>> milk_data_set.clear()\n",
    "    set()\n",
    "    \n",
    "    >>> del milk_data_set\n",
    "    \"\"\"\n",
    "\n",
    "    milk_data_set = {5, 'milk', 3.14, True, 'dairy'}\n",
    "    return milk_data_set\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    milk_data_set = milk_dairy_management_data_set()\n",
    "    print(\"Original Set:\", milk_data_set)\n",
    "\n",
    "    popped_element = milk_data_set.pop()\n",
    "    print(\"Popped Element:\", popped_element)\n",
    "\n",
    "    element_to_discard = 'dairy'\n",
    "    milk_data_set.discard(element_to_discard)\n",
    "    print(\"Set after discarding element:\", milk_data_set)\n",
    "\n",
    "    milk_data_set.clear()\n",
    "    print(\"Cleared Set:\", milk_data_set)\n",
    "\n",
    "    del milk_data_set\n",
    "    try:\n",
    "        print(\"Set after 'del' statement:\", milk_data_set)\n",
    "    except NameError:\n",
    "        print(\"Set has been deleted.\")\n",
    "    if __name__ == \"__main__\":\n",
    "     milk_data_set = milk_dairy_management_data_set()\n",
    "     print(\"Original Set:\", milk_data_set)\n",
    "\n",
    "    # Update the set with at least 5 string attributes related to milk dairy management\n",
    "    additional_attributes = {'cow', 'farm', 'butter', 'cheese', 'yogurt'}\n",
    "    milk_data_set.update(additional_attributes)\n",
    "\n",
    "    print(\"Updated Set with Additional Attributes:\", milk_data_set)    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Set: {'butter', 'yoghurt', 'cheese'}\n",
      "Sorted Set (Descending Order): ['yoghurt', 'cheese', 'butter']\n"
     ]
    }
   ],
   "source": [
    "#sorting the set\n",
    "def set_op():\n",
    "     string_set= {\"butter\", \"cheese\", \"yoghurt\"}\n",
    "     print(\"Initial Set:\", string_set)\n",
    "     sorted_set =sorted(string_set, reverse=True) \n",
    "     print(\"Sorted Set (Descending Order):\", sorted_set)\n",
    "set_op()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Tuple: ('butter', 'Cheese', 'Yoghurt')\n",
      "\n",
      "Unpacked Variables: \n",
      "product 1: butter\n",
      "product 2: Cheese\n",
      "product 3: Yoghurt\n"
     ]
    }
   ],
   "source": [
    "#packing and unpacking of tuple\n",
    "def tuple_op():\n",
    "     #packing\n",
    "     products = (\"butter\", \"Cheese\", \"Yoghurt\")\n",
    "     print(\"Original Tuple:\",products)\n",
    "     \n",
    "     #unpacking\n",
    "     butterproduct1, cheeseproduct2, yoghurtproduct3= products\n",
    "     print(\"\\nUnpacked Variables: \")\n",
    "     print(\"product 1:\", butterproduct1)\n",
    "     print(\"product 2:\", cheeseproduct2)\n",
    "     print(\"product 3:\", yoghurtproduct3)\n",
    "tuple_op()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count of r 9\n",
      "Original Domain Name: milkdairy management\n",
      "\n",
      " Positive Slicing:\n",
      "1. Slicing from index 3 to 9: kdairy \n",
      "2. Slicing from index 0 to 7: milkdair\n",
      "3. Slicing from index 5 to the end:  airy management\n",
      "4. Slicing from index 2 to 11 with step 2: ldiym\n",
      "\n",
      "Negative Slicing:\n",
      "1. Slicing from the end -8 to the end -3: nageme\n",
      "2. Slicing from the end -11 to the end -1 with step 2:  aaee\n",
      "\n",
      "Negative Indexing: \n",
      "Last character: t\n",
      "Second to last character: n\n"
     ]
    }
   ],
   "source": [
    "d_name=(\"m\",\"i\",\"l\",\"k\",\"d\",\"a\",\"i\",\"r\",\"y\")\n",
    "count=0\n",
    "for i in d_name:\n",
    "     count=count+1\n",
    "print(\"count of r\", count)\n",
    "\n",
    "#tuple slicing\n",
    "def  slice_neg_index(domain_name): \n",
    "     print(\"Original Domain Name:\", domain_name) \n",
    "     print(\"\\n Positive Slicing:\")\n",
    "     print(\"1. Slicing from index 3 to 9:\", domain_name[3:10])\n",
    "     print(\"2. Slicing from index 0 to 7:\", domain_name[:8])\n",
    "     print(\"3. Slicing from index 5 to the end: \", domain_name [5:])\n",
    "     print(\"4. Slicing from index 2 to 11 with step 2:\", domain_name[2:12:2])\n",
    "     print(\"\\nNegative Slicing:\")\n",
    "     print(\"1. Slicing from the end -8 to the end -3:\", domain_name [-8:-2])\n",
    "     print(\"2. Slicing from the end -11 to the end -1 with step 2:\",domain_name[-11:-1:2])\n",
    "     print(\"\\nNegative Indexing: \")\n",
    "     print(\"Last character:\", domain_name[-1])\n",
    "     print(\"Second to last character:\", domain_name [-2]) \n",
    "domain_name = \"milkdairy management\"\n",
    "slice_neg_index (domain_name)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
